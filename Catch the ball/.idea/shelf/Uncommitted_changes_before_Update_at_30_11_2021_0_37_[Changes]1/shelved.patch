Index: Catch a mouse.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame as pg\r\nfrom pygame.draw import *\r\nfrom pygame.locals import *\r\nfrom random import randint, random\r\nimport pygame.freetype\r\n\r\npg.init()\r\n\r\nFPS = 30\r\nsize_x, size_y = 800, 800\r\nscreen = pg.display.set_mode((size_x, size_y))\r\nnumber_of_balls = 1\r\nspeed = 9\r\nma_balls = list()\r\nfont = pg.freetype.SysFont('Times New Roman', 35)\r\npoints = 0\r\nk = 0\r\npop_x = 0\r\npop_y = 0\r\ngotcha = False\r\ntimer = 0\r\nseconds = 0\r\nminutes = 0\r\n\r\n\r\ndef sign(x):\r\n    if (x >= 0):\r\n        return (1)\r\n    else:\r\n        return (-1)\r\n\r\n\r\nclass Ball:\r\n    def __init__(self, x1, x2, y1, y2):\r\n        self.x = randint(x1, x2)\r\n        self.y = randint(y1, y2)\r\n        self.r = randint(10, 20)\r\n        self.vx = randint(-speed, speed)\r\n        self.vy = randint(-speed, speed)\r\n        self.color = (153, 153, 153)\r\n\r\n    def move(self, t):\r\n        if (self.vx == 0) and (self.vx == 0):\r\n            self.vy = randint(-speed, speed)\r\n            self.vx = randint(-speed, speed)\r\n\r\n        self.x += self.vx * t\r\n        self.y += self.vy * t\r\n\r\n    def reflection(self):\r\n        if (self.x + self.vx + self.r >= 700) or \\\r\n                (self.x + self.vx <= 100):\r\n            k = randint(1, speed)\r\n            self.vx = -sign(self.vx) * k\r\n            self.vy = randint(-speed, speed)\r\n\r\n        if (self.y + self.vy + self.r >= 700) or \\\r\n                (self.y + self.vy <= 100):\r\n            k = randint(1, speed)\r\n            self.vy = -sign(self.vy) * k\r\n            self.vx = randint(-min(abs(speed), self.x),\r\n                              min(abs(speed), 700 - self.r - self.x))\r\n\r\n    def draw_ball(self):\r\n        circle(screen, self.color, (self.x, self.y), self.r)\r\n        circle(screen, self.color, (self.x + 0.75 * self.r * sign(self.vx), self.y + 0.75 * self.r * sign(self.vy)),\r\n               self.r * 0.5)\r\n        circle(screen, (0, 0, 0), (self.x + 1.10 * self.r * sign(self.vx), self.y + 1.10 * self.r * sign(self.vy)),\r\n               self.r * 0.2)\r\n        line(screen, self.color, (self.x, self.y),\r\n             (self.x - 1.5 * sign(self.vx) * self.r, self.y - 1.5 * self.r * sign(self.vy)), 3)\r\n\r\n    def touch_ma_ball(self, i):\r\n        global points, k, pop_x, pop_y, gotcha\r\n        if (self.x - event.pos[0]) ** 2 + (self.y - event.pos[1]) ** 2 <= self.r ** 2:\r\n            ma_balls.pop(i)\r\n            pop_x = self.x\r\n            pop_y = self.y\r\n            gotcha = True\r\n            k = 0\r\n            points += 1\r\n\r\n\r\nfor i in range(number_of_balls):\r\n    ma_balls.append(Ball(110, 690, 110, 690))\r\n    ma_balls[i].draw_ball()\r\npg.display.update()\r\nclock = pg.time.Clock()\r\nfinished = False\r\nwhile not finished and points != number_of_balls:\r\n    clock.tick(FPS)\r\n    keys = pg.key.get_pressed()\r\n    if keys[pg.K_ESCAPE]:\r\n        finished = True\r\n    for event in pg.event.get():\r\n        if event.type == pg.QUIT:\r\n            finished = True\r\n        elif event.type == pg.MOUSEBUTTONDOWN and event.button == 1:\r\n            if (event.pos[0] >= 100) and (event.pos[0] <= 300) and (event.pos[1] >= 710):\r\n                save_sec = seconds\r\n                save_min = minutes\r\n                save_points = points\r\n                points = -1\r\n            for i in range(len(ma_balls) - 1, -1, -1):\r\n                gotcha == False\r\n                ma_balls[i].touch_ma_ball(i)\r\n    pg.display.update()\r\n    screen.fill((255, 255, 255))\r\n    rect(screen, (255, 204, 255), (100, 100, 600, 600))\r\n    font.render_to(screen, (20, 20), \"Поймано мышек: \" + str(points), (255, 153, 255))\r\n    timer += 1\r\n    if timer == 30:\r\n        seconds += 1\r\n        timer = 0\r\n    if seconds == 60:\r\n        minutes += 1\r\n        seconds = 0\r\n    if minutes == 60:\r\n        minutes = 0\r\n        finished = True\r\n    pg.draw.polygon(screen, (255, 153, 255), ((100, 710), (360, 710), (360, 800), (100, 800)), 10)\r\n    font.render_to(screen, (110, 750), \"КОТИК УСТАЛ\", (255, 153, 255))\r\n    font.render_to(screen, (510, 20), \" ВреМЯУ: \" + str(minutes) + ' m ' + str(seconds) + ' s', (255, 153, 255))\r\n    if (gotcha == True) and (k < 7):\r\n        font.render_to(screen, (pop_x, pop_y), '+1', (255, 153, 255))\r\n        k += 1\r\n    for i in range(len(ma_balls)):\r\n        ma_balls[i].draw_ball()\r\n        ma_balls[i].move(1)\r\n        ma_balls[i].reflection()\r\n    if points == -1:\r\n        screen.fill((255, 255, 255))\r\n        pg.draw.polygon(screen, (255, 153, 255), ((50, 300), (330, 300), (330, 390), (50, 390)), 10)\r\n        font.render_to(screen, (60, 340), \"КОТИК УШЕЛ\", (255, 153, 255))\r\n        if (event.type == pg.MOUSEBUTTONDOWN) and (event.button == 1) and (event.pos[0] > 100) and (\r\n                event.pos[0] < 380) and (event.pos[1] > 300) and (event.pos[1] < 390):\r\n            finished = True\r\n        pg.draw.polygon(screen, (255, 153, 255), ((370, 300), (710, 300), (710, 390), (370, 390)), 10)\r\n        font.render_to(screen, (380, 340), \"КОТИК ОТДОХНУЛ\", (255, 153, 255))\r\n        if (event.type == pg.MOUSEBUTTONDOWN) and (event.button == 1) and (event.pos[0] > 450) and (\r\n                event.pos[0] < 790) and (event.pos[1] > 300) and (event.pos[1] < 390):\r\n            seconds = save_sec\r\n            minutes = save_min\r\n            points = save_points\r\n            timer = 0\r\n            rest = False\r\n    if points == -2:\r\n        screen.fill((255, 255, 255))\r\n        pg.draw.polygon(screen, (255, 153, 255), ((50, 300), (330, 300), (330, 390), (50, 390)), 10)\r\n        font.render_to(screen, (60, 340), \"КОТИК УШЕЛ\", (255, 153, 255))\r\n        if (event.type == pg.MOUSEBUTTONDOWN) and (event.button == 1) and (event.pos[0] > 100) and (\r\n                event.pos[0] < 380) and (event.pos[1] > 300) and (event.pos[1] < 390):\r\n            finished = True\r\n        pg.draw.polygon(screen, (255, 153, 255), ((370, 300), (710, 300), (710, 390), (370, 390)), 10)\r\n        font.render_to(screen, (380, 340), \"КОТИК ХОЧЕТ ЕЩЕ\", (255, 153, 255))\r\n        if (event.type == pg.MOUSEBUTTONDOWN) and (event.button == 1) and (event.pos[0] > 450) and (\r\n                event.pos[0] < 790) and (event.pos[1] > 300) and (event.pos[1] < 390):\r\n            s = 0\r\n            points = 0\r\n            save_min = 0\r\n            save_sec = 0\r\nscreen.fill((255, 255, 255))\r\nfont.render_to(screen, (100, 100), \"Какая кличка у вашего котика? \", (255, 153, 255))\r\nfinished = False\r\nname = \"\"\r\nwhile not finished:\r\n    screen.fill((255, 255, 255))\r\n    font.render_to(screen, (100, 100), \"Какая кличка у вашего котика? \", (255, 153, 255))\r\n    for event in pygame.event.get():\r\n        if event.type == pygame.KEYDOWN:\r\n            if event.key == pygame.K_RETURN:\r\n                finished = True\r\n            elif event.key == pygame.K_BACKSPACE:\r\n                name = name[:-1]\r\n            else:\r\n                name += pygame.key.name(event.key)\r\n        font.render_to(screen, (100, 140), name, (255, 153, 255))\r\n        pygame.display.update()\r\n\r\n\r\npg.quit()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Catch a mouse.py b/Catch a mouse.py
--- a/Catch a mouse.py	
+++ b/Catch a mouse.py	
@@ -3,34 +3,36 @@
 from pygame.locals import *
 from random import randint, random
 import pygame.freetype
-
+import json
 pg.init()
 
 FPS = 30
 size_x, size_y = 800, 800
 screen = pg.display.set_mode((size_x, size_y))
-number_of_balls = 1
+number_of_mice = 1
 speed = 9
-ma_balls = list()
+mice = list()
 font = pg.freetype.SysFont('Times New Roman', 35)
 points = 0
 k = 0
 pop_x = 0
 pop_y = 0
 gotcha = False
+table = False
 timer = 0
 seconds = 0
 minutes = 0
-
+catpoints = 0
+n = 0
 
 def sign(x):
-    if (x >= 0):
-        return (1)
+    if x >= 0:
+        return 1
     else:
-        return (-1)
+        return -1
 
 
-class Ball:
+class Mouse:
     def __init__(self, x1, x2, y1, y2):
         self.x = randint(x1, x2)
         self.y = randint(y1, y2)
@@ -61,7 +63,7 @@
             self.vx = randint(-min(abs(speed), self.x),
                               min(abs(speed), 700 - self.r - self.x))
 
-    def draw_ball(self):
+    def draw_mouse(self):
         circle(screen, self.color, (self.x, self.y), self.r)
         circle(screen, self.color, (self.x + 0.75 * self.r * sign(self.vx), self.y + 0.75 * self.r * sign(self.vy)),
                self.r * 0.5)
@@ -70,10 +72,10 @@
         line(screen, self.color, (self.x, self.y),
              (self.x - 1.5 * sign(self.vx) * self.r, self.y - 1.5 * self.r * sign(self.vy)), 3)
 
-    def touch_ma_ball(self, i):
+    def touch_mouse(self, i):
         global points, k, pop_x, pop_y, gotcha
         if (self.x - event.pos[0]) ** 2 + (self.y - event.pos[1]) ** 2 <= self.r ** 2:
-            ma_balls.pop(i)
+            mice.pop(i)
             pop_x = self.x
             pop_y = self.y
             gotcha = True
@@ -81,17 +83,15 @@
             points += 1
 
 
-for i in range(number_of_balls):
-    ma_balls.append(Ball(110, 690, 110, 690))
-    ma_balls[i].draw_ball()
+for i in range(number_of_mice):
+    mice.append(Mouse(110, 690, 110, 690))
+    mice[i].draw_mouse()
 pg.display.update()
 clock = pg.time.Clock()
 finished = False
-while not finished and points != number_of_balls:
+while not finished and points != number_of_mice:
     clock.tick(FPS)
     keys = pg.key.get_pressed()
-    if keys[pg.K_ESCAPE]:
-        finished = True
     for event in pg.event.get():
         if event.type == pg.QUIT:
             finished = True
@@ -101,9 +101,9 @@
                 save_min = minutes
                 save_points = points
                 points = -1
-            for i in range(len(ma_balls) - 1, -1, -1):
+            for i in range(len(mice) - 1, -1, -1):
                 gotcha == False
-                ma_balls[i].touch_ma_ball(i)
+                mice[i].touch_mouse(i)
     pg.display.update()
     screen.fill((255, 255, 255))
     rect(screen, (255, 204, 255), (100, 100, 600, 600))
@@ -122,12 +122,12 @@
     font.render_to(screen, (110, 750), "КОТИК УСТАЛ", (255, 153, 255))
     font.render_to(screen, (510, 20), " ВреМЯУ: " + str(minutes) + ' m ' + str(seconds) + ' s', (255, 153, 255))
     if (gotcha == True) and (k < 7):
-        font.render_to(screen, (pop_x, pop_y), '+1', (255, 153, 255))
+        font.render_to(screen, (pop_x, pop_y), '+1' , (255, 153, 255))
         k += 1
-    for i in range(len(ma_balls)):
-        ma_balls[i].draw_ball()
-        ma_balls[i].move(1)
-        ma_balls[i].reflection()
+    for i in range(len(mice)):
+        mice[i].draw_mouse()
+        mice[i].move(1)
+        mice[i].reflection()
     if points == -1:
         screen.fill((255, 255, 255))
         pg.draw.polygon(screen, (255, 153, 255), ((50, 300), (330, 300), (330, 390), (50, 390)), 10)
@@ -163,7 +163,7 @@
 font.render_to(screen, (100, 100), "Какая кличка у вашего котика? ", (255, 153, 255))
 finished = False
 name = ""
-while not finished:
+while finished is False:
     screen.fill((255, 255, 255))
     font.render_to(screen, (100, 100), "Какая кличка у вашего котика? ", (255, 153, 255))
     for event in pygame.event.get():
@@ -176,6 +176,27 @@
                 name += pygame.key.name(event.key)
         font.render_to(screen, (100, 140), name, (255, 153, 255))
         pygame.display.update()
+catpoints = points * 100 - minutes * 10 - seconds
+with open(r"C:\Users\Asus\PycharmProjects\Karpenko_MIPT_Pythonlabs\Catch the ball\record_table.json") as f:
+    data = json.load(f)
+data[name] = catpoints
+screen.fill((255, 255, 255))
+height = 50
+for p, v in data.items():
+    font.render_to(screen, (20, height), "имя котика : " + p + "  его котоочки: " + str(v), (255, 153, 255))
+    height += 40
+    if (event.type == pg.MOUSEBUTTONDOWN) and (event.button == 1) and (event.pos[0] > 100) and (
+            event.pos[0] < 380) and (event.pos[1] > 300) and (event.pos[1] < 390):
+        finished = True
+    pygame.display.update()
+    finished = False
 
 
-pg.quit()
\ No newline at end of file
+while not finished:
+    for event in pygame.event.get():
+        if event.type == pygame.QUIT:
+            finished = True
+with open(r"C:\Users\Asus\PycharmProjects\Karpenko_MIPT_Pythonlabs\Catch the ball\record_table.json", 'w') as f:
+    json.dump(data, f)
+
+pg.quit()
